}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
Medicare <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", Medicare, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
setwd("~/DataVisualization/DV_RProject3/01 Data/CSVs")
file_path <- "Medicare_Hospital_Spending_by_Claim.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df)
measures <- c("Provider_Number", "AvgSpendingPerEpisode_Hospi_", "AvgSpendPerEpisode_St_", "AvgSpendPerEpisode_Nat_", "", "PercentSpend_Hosp_  ","PercentSpend_St_ ", "PercentSpend_Nat_", "Start_Date","End_Date")
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
# replace 'NA' in data numEmps 0
}
}
# Make all state data to upper case
df["State"] <- data.frame(lapply(df["State"], toupper))
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
Medicare <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", Medicare, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
setwd("~/DataVisualization/DV_RProject3/01 Data/CSVs")
file_path <- "Medicare_Hospital_Spending_by_Claim.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df)
measures <- c("Provider_Number", "AvgSpendingPerEpisode_Hospi_", "AvgSpendPerEpisode_St_", "AvgSpendPerEpisode_Nat_", "", "PercentSpend_Hosp_  ","PercentSpend_St_ ", "PercentSpend_Nat_", "Start_Date","End_Date")
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
dimensions
measures <- c("Provider_Number", "AvgSpendingPerEpisode_Hospi_", "AvgSpendPerEpisode_St_", "AvgSpendPerEpisode_Nat_", "", "PercentSpend_Hosp_" "PercentSpend_St_" , "PercentSpend_Nat_", "Start_Date","End_Date")
measures <- c("Provider_Number", "AvgSpendingPerEpisode_Hospi_", "AvgSpendPerEpisode_St_", "AvgSpendPerEpisode_Nat_", "", "PercentSpend_Hosp_", "PercentSpend_St_" , "PercentSpend_Nat_", "Start_Date","End_Date")
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
dimensions
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
# replace 'NA' in data numEmps 0
}
}
# Make all state data to upper case
df["State"] <- data.frame(lapply(df["State"], toupper))
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
Medicare <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", Medicare, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
# replace 'NA' in data numEmps 0
}
}
# Make all state data to upper case
df["State"] <- data.frame(lapply(df["State"], toupper))
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
Medicare <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", Medicare, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
# Make all state data to upper case
df["State"] <- data.frame(lapply(df["State"], toupper))
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
setwd("~/DataVisualization/DV_RProject3/01 Data/CSVs")
file_path <- "Medicare_Hospital_Spending_by_Claim.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df)
measures <- c("Provider_Number", "AvgSpendingPerEpisode_Hospi_", "AvgSpendPerEpisode_St_", "AvgSpendPerEpisode_Nat_", "", "PercentSpend_Hosp_", "PercentSpend_St_" , "PercentSpend_Nat_", "Start_Date","End_Date")
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
# replace 'NA' in data numEmps 0
}
}
# Make all state data to upper case
df["State"] <- data.frame(lapply(df["State"], toupper))
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
Medicare <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", Medicare, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
measures <- c("Provider_Number", "AvgSpendingPerEpisode_Hospi_", "AvgSpendPerEpisode_St_", "AvgSpendPerEpisode_Nat_", "PercentSpend_Hosp_", "PercentSpend_St_" , "PercentSpend_Nat_", "Start_Date","End_Date")
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
# replace 'NA' in data numEmps 0
}
}
# Make all state data to upper case
df["State"] <- data.frame(lapply(df["State"], toupper))
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
Medicare <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", Medicare, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
measures <- c("Provider_Number", "AvgSpendingPerEpisode_Hospi_", "AvgSpendPerEpisode_St_", "AvgSpendPerEpisode_Nat_", "PercentSpend_Hosp_", "PercentSpend_St_" , "PercentSpend_Nat_", "Start_Date","End_Date")
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
# replace 'NA' in data numEmps 0
}
}
# Make all state data to upper case
df["State"] <- data.frame(lapply(df["State"], toupper))
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
Medicare <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", Medicare, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
setwd("~/DataVisualization/DV_RProject3/01 Data/CSVs")
file_path <- "statesAbbr.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df)
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- c(" State", "Abbreviation")
if(! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
# replace 'NA' in data numEmps 0
}
}
# Make all state data to upper case
df["State"] <- data.frame(lapply(df["State"], toupper))
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
GDP <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", GDP, "(\n-- Change table_name to the table name you want.\n")
if(! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
}
sql <- paste(sql, ");")
cat(sql)
setwd("~/DataVisualization/DV_RProject3/01 Data/CSVs")
file_path <- "statesAbbr.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df)
measures <- c()
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
# Get rid of " and ' in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="[\"']",replacement= ""))
# Change & to and in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern="&",replacement= " and "))
# Change : to ; in dimensions.
df[d] <- data.frame(lapply(df[d], gsub, pattern=":",replacement= ";"))
# replace 'NA' in data numEmps 0
}
}
# Make all state data to upper case
df["State"] <- data.frame(lapply(df["State"], toupper))
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
df[m] <- data.frame(lapply(df[m], gsub, pattern="[^--.0-9]",replacement= ""))
}
}
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
states <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", states, "(\n-- Change table_name to the table name you want.\n")
if( length(measures) > 1 || ! is.na(dimensions)) {
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
}
if( length(measures) > 1 || ! is.na(measures)) {
for(m in measures) {
if(m != tail(measures, n=1)) sql <- paste(sql, paste(m, "number(38,4),\n"))
else sql <- paste(sql, paste(m, "number(38,4)\n"))
}
}
sql <- paste(sql, ");")
cat(sql)
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- setdiff(names(df), measures)
# Make all state data to upper case
df["State"] <- data.frame(lapply(df["State"], toupper))
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
states <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", states, "(\n-- Change table_name to the table name you want.\n")
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
sql <- paste(sql, ");")
cat(sql)
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- c("State", "Abbreviation")
# Make all state data to upper case
df["State"] <- data.frame(lapply(df["State"], toupper))
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
states <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", states, "(\n-- Change table_name to the table name you want.\n")
for(d in dimensions) {
sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
sql <- paste(sql, ");")
cat(sql)
for(n in names(df)) {
df[n] <- data.frame(lapply(df[n], gsub, pattern="[^ -~]",replacement= ""))
}
dimensions <- c("State", "Abbreviation")
# Make all state data to upper case
df["State"] <- data.frame(lapply(df["State"], toupper))
write.csv(df, paste(gsub(".csv", "", file_path), ".reformatted.csv", sep=""), row.names=FALSE, na = "")
states <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", states, "(\n-- Change table_name to the table name you want.\n")
for(d in dimensions) {
if(d != tail(dimensions, n=1)) sql <- paste(sql, paste(d, "varchar2(4000),\n"))
else sql <- paste(sql, paste(d, "varchar2(4000),\n"))
}
sql <- paste(sql, ");")
cat(sql)
states <- gsub(" +", "_", gsub("[^A-z, 0-9, ]", "", gsub(".csv", "", file_path)))
sql <- paste("CREATE TABLE", states, "(\n-- Change table_name to the table name you want.\n")
for(d in dimensions) {
if(d != tail(dimensions, n=1)) sql <- paste(sql, paste(d, "varchar2(4000),\n"))
else sql <- paste(sql, paste(d, "varchar2(4000)\n"))
}
sql <- paste(sql, ");")
cat(sql)
df3 <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from MEDICARE"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ams6624', PASS='orcl_ams6624', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
summary(df3)
require("jsonlite")
require("RCurl")
require("dplyr")
# Change the USER and PASS below to be your UTEid
df2 <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from USGS_STATE_2010"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ams6624', PASS='orcl_ams6624', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
summary(df2)
df3 <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from MEDICARE"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ams6624', PASS='orcl_ams6624', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
summary(df3)
df5 <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from MEDICARE"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ams6624', PASS='orcl_ams6624', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
summary(df5)
df4 <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from STATEABBR"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ams6624', PASS='orcl_ams6624', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
summary(df4)
df4 <- data.frame(fromJSON(getURL(URLencode('129.152.144.84:5001/rest/native/?query="select * from STATESABBR"'),httpheader=c(DB='jdbc:oracle:thin:@129.152.144.84:1521/PDBF15DV.usuniversi01134.oraclecloud.internal', USER='cs329e_ams6624', PASS='orcl_ams6624', MODE='native_mode', MODEL='model', returnDimensions = 'False', returnFor = 'JSON'), verbose = TRUE)))
summary(df4)
dr2 <- dplyr::inner_join(df4, df5, by="STATE")
dr2 <- dplyr::left_join(df4, df5, by="STATE")
dr2
dr2
dr2 <- dplyr::outer_join(df4, df5, by="STATE")
dr2 <- dplyr::inner_join(df4, df5, by="STATE")
dr2
df4
df5
summary(df5)
setwd("~/DataVisualization/DV_RProject3/01 Data/CSVs")
file_path <- "Medicare_Hospital_Spending_by_Claim.csv"
df <- read.csv(file_path, stringsAsFactors = FALSE)
# Replace "." (i.e., period) with "_" in the column names.
names(df) <- gsub("\\.+", "_", names(df))
str(df)
dr2 <- dplyr::inner_join(df5, df4, by=c("STATE" = "ABBREVIATION")
dr2
dr2 <- dplyr::inner_join(df5, df4, by=c("STATE" = "ABBREVIATION")
tmp <- dr2
dr2 <- dplyr::inner_join(df5, df4, by=c("STATE" = "ABBREVIATION"))
dr2
dr2 <- dplyr::left_join(df5, df4, by=c("STATE" = "ABBREVIATION"))
summary(dr2)
dr2
dr2 <- dplyr::right_join(df5, df4, by=c("STATE" = "ABBREVIATION"))
dr2
dr2 <- dplyr::inner_join(df5, df4, by=c("STATE" = "ABBREVIATION"))
summary(dr2)
dr2 <- dplyr::left_join(df5, df4, by=c("STATE" = "ABBREVIATION"))
names
names(dr2)
view(dr2)
View(dr2)
View(df2)
View(df1)
dr2 <- dplyr::left_join(df5, df2, by="STATE")
View(dr2)
dr2 <- dplyr::inner_join(df5, df2, by="STATE")
View(dr2)
View(df5)
dr2 <- dplyr::left_join(df5, df4, by=c("STATE" = "ABBREVIATION"))
View(dr2)
dr3 <- dplyr::left_join(dr2, df2, by="STATE")
View(dr3)
dr3 <- dplyr::inner_join(dr2, df2, by="STATE")
View(dr3)
dr3 <- dplyr::right_join(dr2, df2, by="STATE")
View(dr3)
dr3 <- dplyr::inner_join(dr2, df2, by=c("STATE.y" = "STATE")
dr3 <- dplyr::inner_join(dr2, df2, by=c("STATE.y" = "STATE"))
dr3 <- dplyr::inner_join(dr2, df2, by=c("STATE.y" = "STATE"))
View(dr3)
dw2 <- tmp %>% select(STATE, HOSPITAL_NAME, POPULATION_MILLION, REVENUE) %>% group_by("STATE") %>% summarize(counts = n_distinct(HOSPITAL_NAME), mean(REVENUE))
dr3 <- dplyr::inner_join(dr2, df2, by=c("STATE.y" = "STATE"))
View(dr3)
dw2 <- tmp %>% select(STATE, HOSPITAL_NAME, POPULATION_MILLION, REVENUE) %>% group_by("STATE") %>% summarize(counts = n_distinct(HOSPITAL_NAME), mean(REVENUE))
dw2 <- tmp %>% select("STATE", "HOSPITAL_NAME", "POPULATION_MILLION", "REVENUE") %>% group_by("STATE") %>% summarize(counts = n_distinct("HOSPITAL_NAME"), mean("REVENUE"))
dw2 <- tmp %>% select(STATE, HOSPITAL_NAME, POPULATION_MILLION, REVENUE) %>% group_by("STATE") %>% summarize(counts = n_distinct(HOSPITAL_NAME), mean(REVENUE))
tmp2 <- dr3
dw2 <- tmp2 %>% select(STATE, HOSPITAL_NAME, POPULATION_MILLION, REVENUE) %>% group_by("STATE") %>% summarize(counts = n_distinct(HOSPITAL_NAME), mean(REVENUE))
dw2 <- tmp2 %>% select(STATE, HOSPITAL_NAME, POPULATION_MILLION_, REVENUE) %>% group_by("STATE") %>% summarize(counts = n_distinct(HOSPITAL_NAME), mean(REVENUE))
dw2
dw2 <- tmp2 %>% select(STATE, HOSPITAL_NAME, POPULATION_MILLION_, REVENUE) %>% group_by("STATE") %>% summarize(counts = n_distinct(HOSPITAL_NAME))
dw2
dw2 <- tmp2 %>% select(STATE, HOSPITAL_NAME, POPULATION_MILLION_, REVENUE) %>% group_by(STATE) %>% summarize(counts = n_distinct(HOSPITAL_NAME))
dw2
dw2 <- tmp2 %>% select(STATE, HOSPITAL_NAME, POPULATION_MILLION_, REVENUE) %>% group_by(STATE) %>% summarize(counts = n_distinct(HOSPITAL_NAME), avg = mean(POPULATION_MILLION), rev_avg = mean(REVENUE))
dw2 <- tmp2 %>% select(STATE, HOSPITAL_NAME, POPULATION_MILLION_, REVENUE) %>% group_by(STATE) %>% summarize(counts = n_distinct(HOSPITAL_NAME), avg = mean(POPULATION_MILLION_), rev_avg = mean(REVENUE))
dw2
dw2 <- tmp2 %>% select(STATE, HOSPITAL_NAME, POPULATION_MILLION_, REVENUE) %>% group_by(STATE) %>% summarize(counts = n_distinct(HOSPITAL_NAME), population = mean(POPULATION_MILLION_), revenue = mean(REVENUE))
dw2
dw2 <- tmp2 %>% select(STATE, HOSPITAL_NAME, POPULATION_MILLION_, REVENUE) %>% group_by(STATE) %>% summarize(num_hospitals = n_distinct(HOSPITAL_NAME), population = mean(POPULATION_MILLION_), revenue = mean(REVENUE))
dw2
ggplot(ggplot(data=dw2, aes(x=population, y=num_hospitals))) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
ggplot(data=dw2, aes(x=population, y=num_hospitals)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
ggplot(data=dw2, aes(x=population, y=num_hospitals)) +
geom_point( size=4, shape=21, fill="white")
ggplot(data=dw2, aes(x=population, y=num_hospitals)) +
geom_point( size=4, shape=21, fill=STATE)
ggplot(data=dw2, aes(x=population, y=num_hospitals, colour = STATE)) +
geom_point( size=4, shape=21)
ggplot(data=dw2, aes(x=population, y=num_hospitals)) +
geom_point( size=4, shape=21, fill=blue)
ggplot(data=dw2, aes(x=population, y=num_hospitals)) +
geom_point( size=4, shape=21, fill="blue")
ggplot(data=dw2, aes(x=population, y=num_hospitals)) +
geom_point( size=4, shape=21, fill="blue", colour = "blue")
ggplot(data=dw2, aes(x=population, y=num_hospitals)) +
geom_point( size=4, shape=21, fill="blue", colour = "blue") +
labs(title='Hospitals and Population by State') +
labs(x=paste("Population(millions)"), y=paste("Number of Hospitals per State"))
